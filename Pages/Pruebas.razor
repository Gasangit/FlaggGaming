@page "/prueba"

@using FlaggGaming.Services.APISteam
@using FlaggGaming.Model.apiSteamJuego
@using FlaggGaming.Model.apiSteamListaJuegosTotal
@inject JuegosListaTotalService listaTotalService
@inject NavigationManager navigationService
@inject JuegoSteamService juegoSteamService

@if (objetoJsonRecibido != null)
{   
    <ul class="row row-cols-3 g-3">
        @foreach (ItemListaJuegoSteam juego in objetoJsonRecibido.applist.apps)
        {
            @if (juego.name.StartsWith("EA SPORTS FC"))
            {
                <div class="col">
                    <div class="row">
                        <a href=@($"/prueba/juego/{juego.appid}")>
                            <li class="col border border-dark p-2 rounded-3 text-center">@juego.appid // @juego.name</li>
                        </a>
                        @*<h6 class="col-12 border border-dark p-2">
                            @if (count < 30)
                            {
                                @(count++) 
                                @(traerJuego(juego.appid.ToString()).Result.type)
                            }
                        </h6>*@
                        <a href=@($"/minima/{juego.appid}")>
                            <h6 class="col text-center border border-dark">--Minima--</h6>
                        </a>
                    </div>
                </div>
            }
        }
    </ul>
}

@code {

    public ObjetoJsonListaJuegos? objetoJsonRecibido { get; set; }
    private Dictionary<string,JuegoSteam>? juegoJson { get; set; }
    int count = 0;

    protected override async Task OnInitializedAsync()
    {
        objetoJsonRecibido =  await listaTotalService.getListaJuegosSteam();

    }

    async Task<JuegoSteamData> traerJuego(string idJuego)
    {
        
        juegoJson = await juegoSteamService.getJuegoSteam(idJuego);
        return juegoJson[idJuego].data;
    }
}
