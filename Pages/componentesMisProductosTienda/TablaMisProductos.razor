@page "/misproductostabla"
@using FlaggGaming.Services.ServicioUsuario
@using FlaggGaming.Model.tienda
@using FlaggGaming.Model.usuarios
@inject FlaggGaming.Entity.DatosContext datosService
@using System.Linq
@using Microsoft.EntityFrameworkCore
@inject NavigationManager NavigationManager



<div class="container">
    <div class="header-row">
        <div class="title">
            <h2>Mis Productos</h2>
        </div>
        <div class="button-container">
            <a href="/cargarproductos" onclick="" class="new-product-button">Nuevo Producto</a>
        </div>
        <div class="col-3 text-right">
            <input @bind="searchTerm" class="search-box form-control" placeholder="Buscar Productos" />
        </div>
    </div>
    @* Mensaje de confirmación *@
    @if (guardadoExitoso)
    {
        <div class="alert alert-success nombre-guardado">
            El producto '@nombreProductoGuardado' ha sido borrado.
        </div>
    }

    <div class="row mt-5">
        @foreach (var producto in productosFiltrados)
        {
            <div class="col-12">
                <div class="card">
                    @foreach (var categoria in categorias)
                    {
                        if (producto.IdCategoria == categoria.IdCategoria)
                        {
                            <img class="card-img" src="imagenes/@(categoria.DescCategoria).png" alt="@categoria.DescCategoria">
                        }

                    }
                    <div class="card-body">
                        <div class="card-info">
                            <p><strong>Nombre:</strong>@producto.SkuTienda</p>
                            <p><strong>Descripción:</strong>@producto.DescTienda</p>
                            <p><strong>Marca:</strong>@producto.Marca</p>
                            <p>
                                <strong>Categoría:</strong>

                                @foreach (var categoria in categorias)
                                {
                                    if (producto.IdCategoria == categoria.IdCategoria)
                                    {
                                        @categoria.DescCategoria
                                        ;
                                    }
                                }
                            </p>
                            <p><strong>Precio:</strong>@producto.PrecioVta</p>

                            @if (producto.Estatus)
                            {
                                <div class="alert alert-success" role="alert">
                                    <p><strong>  Activo</strong></p>
                                </div>
                            }
                            else
                            {
                                <div class="alert alert-danger" role="alert">
                                    <p><strong>  Inactivo</strong></p>
                                </div>
                            }

                        </div>
                        <div class="card-actions">
                            <a class="btn btn-primary" href="editarproductos/@producto.IdInternoProducto">Editar</a>
                            <a class="btn btn-danger" @onclick="() => ConfirmarBorrado(producto.IdInternoProducto)" href="/misproductos">Borrar</a>
                        </div>

                    </div>
                </div>
            </div>
        }


    </div>
</div>


@code {
    private List<Producto> productos = new List<Producto>();
    private List<Categoria> categorias = new List<Categoria>();
    private UsuariosTienda usuariostienda = new UsuariosTienda();
    private string searchTerm = ""; // Variable para almacenar el término de búsqueda
    private bool guardadoExitoso;
    private string nombreProductoGuardado;

    // Propiedad que devuelve la lista de tiendas filtradas según el término de búsqueda
    private IEnumerable<Producto> productosFiltrados =>
        productos.Where(p => string.IsNullOrEmpty(searchTerm) || p.SkuTienda.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));


    protected override async Task OnInitializedAsync()
    {
        usuariostienda = await datosService.UsuariosTiendas.FirstOrDefaultAsync(u => u.IdU == ServicioUsurioLogin.Id);
        categorias = await datosService.Categorias.ToListAsync();
        productos = await datosService.Productos.Where(p => p.IdTienda == usuariostienda.IdT).ToListAsync();
    }

    private async Task ConfirmarBorrado(int idProducto)
    {
        // Llama a JavaScript para mostrar el cuadro de confirmación
        if (await jsRuntime.InvokeAsync<bool>("confirm", "¿Estás seguro de que deseas eliminar este producto?"))
        {
            await BorrarProducto(idProducto);
        }
    }

    private async Task BorrarProducto(int idProducto)
    {
        // Buscar el producto en la base de datos por su ID
        var producto = await datosService.Productos.FirstOrDefaultAsync(p => p.IdInternoProducto == idProducto);

        // Si el producto existe, proceder con la eliminación
        if (producto != null)
        {
            datosService.Productos.Remove(producto);
            await datosService.SaveChangesAsync();
            productos.RemoveAll(p => p.IdInternoProducto == idProducto);
            nombreProductoGuardado = producto.SkuTienda;
            guardadoExitoso = true; // Mostrar un mensaje de confirmación si es necesario
            producto = new Producto();

        }
        else
        {
            // Manejar el caso cuando el producto no se encuentra
            // Por ejemplo, puedes mostrar un mensaje de error
            Console.WriteLine("Producto no encontrado");
        }
    }

    [Inject] private IJSRuntime? jsRuntime { get; set; }
}