@using FlaggGaming.Model
@using FlaggGaming.Services.ServicioUsuario
@using FlaggGaming.Model.tienda
@inject FlaggGaming.Entity.DatosContext datosService
@using System.Linq
@using Microsoft.EntityFrameworkCore
@inject NavigationManager NavigationManager
@using FlaggGaming.Model.usuarios

<div class="row justify-content-center formulario-carga-producto">


    <div class="col-6 mb-3 p-4 rounded-3 border">
        <div class="row mb-3 align-items-center">
            <label for="idProducto" class="col-4 col-form-label">ID Producto</label>
            <div class="col-8">
                <input @bind="producto.IdInternoProducto" id="idProducto" type="text" class="form-control" disabled />
            </div>
        </div>
        <div class="row mb-3 align-items-center">
            <label for="skuTienda" class="col-4 col-form-label">SKU Tienda</label>
            <div class="col-8">
                <input @bind="producto.SkuTienda" id="SkuProducto" type="text" class="form-control" />
            </div>
        </div>
        <div class="row mb-3 align-items-center">
            <label for="descripcion" class="col-4 col-form-label">Descripción</label>
            <div class="col-8">
                <textarea @bind="producto.DescTienda" id="descripcion" type="text" class="form-control" rows="10"></textarea>
            </div>
        </div>
        <div class="row mb-3 align-items-center">
            <label for="categoria" class="col-4 col-form-label">Categoría</label>
            <div class="col-8">
                <select @bind="producto.IdCategoria" id="categoria" class="form-select">
                    @foreach (var categoria in categorias)
                    {
                        <option value="@categoria.IdCategoria">@categoria.DescCategoria</option>
                    }
                </select>
            </div>
        </div>
        <div class="row mb-3 align-items-center">
            <label for="marca" class="col-4 col-form-label">Marca</label>
            <div class="col-8">
                <input @bind="producto.Marca" id="marca" type="text" class="form-control" />
            </div>
        </div>
        <div class="row mb-3 align-items-center">
            <label for="precioVenta" class="col-4 col-form-label">Precio</label>
            <div class="col-8">
                <input @bind="producto.PrecioVta" id="precioVenta" type="text" class="form-control" />
            </div>
        </div>
        <div class="row align-items-center">
            <label for="estado" class="col-4 col-form-label">Estado</label>
            <div class="col-8">
                <select id="estado" class="form-select" @onchange="OnStatusChange">
                    @if (producto.Estatus)
                    {
                        <option value="True">Activo</option>
                        <option value="False">Inactivo</option>
                    }
                    else
                    {
                        <option value="False">Inactivo</option>
                        <option value="True">Activo</option>
                    }
                </select>
            </div>
        </div>
        <div class="col-12 text-center mt-4">
            <a class="btn btn-success" @onclick="ModificarProducto">Modificar Producto</a>
        </div>
        @* Mensaje de confirmación *@
        @if (guardadoExitoso)
        {
            <div class="alert alert-success nombre-guardado">
                El producto '@nombreProductoGuardado' se modificó correctamente.
            </div>
        }
    </div>

</div>

@code {

    [Parameter] public int IdProducto { get; set; }

    private Producto producto { get; set; } = new Producto();
    private bool guardadoExitoso;
    private List<Categoria> categorias = new List<Categoria>();
    private UsuariosTienda usuariostienda = new UsuariosTienda();
    private string nombreProductoGuardado;

    protected override async Task OnInitializedAsync()
    {
        usuariostienda = await datosService.UsuariosTiendas.FirstOrDefaultAsync(u => u.IdU == ServicioUsurioLogin.Id);
        categorias = await datosService.Categorias.ToListAsync();
        producto = await datosService.Productos.FirstOrDefaultAsync(p => p.IdInternoProducto == IdProducto);

    }

    private async Task ModificarProducto()
    {

        // Actualizar los datos del producto en la base de datos
        datosService.Productos.Update(producto);
        await datosService.SaveChangesAsync();
        nombreProductoGuardado = producto.SkuTienda;
        guardadoExitoso = true; // Mostrar un mensaje de confirmación
        producto = new Producto();
        NavigationManager.NavigateTo($"/misproductos");
    }

    private void OnStatusChange(ChangeEventArgs e)
    {
        producto.Estatus = bool.Parse(e.Value.ToString());
    }
}