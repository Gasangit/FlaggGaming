@using FlaggGaming.Model
@using FlaggGaming.Services.ServicioUsuario
@using FlaggGaming.Model.tienda
@using FlaggGaming.Model.usuarios
@inject FlaggGaming.Entity.DatosContext datosService
@using System.Linq
@using Microsoft.EntityFrameworkCore
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Forms

<div class="row d-flex justify-content-center formulario-carga-producto">
    <div class="col-12 mb-3 p-4 rounded-3 border">
        <div class="col-6 text-end mb-12">

            @if (errorMessage != null)
            {
                <p>@errorMessage</p>
            }
        </div>
    </div>
    <div class="col-6 mb-3 p-4 rounded-3 border">
        <div class="row mb-3 align-items-center">
            <label for="skuTienda" class="col-4 col-form-label">SKU Tienda</label>
            <div class="col-8">
                <input @bind="producto.SkuTienda" id="SkuProducto" type="text" class="form-control" />
            </div>
        </div>
        <div class="row mb-3 align-items-center">
            <label for="descripcion" class="col-4 col-form-label">Descripción</label>
            <div class="col-8">
                <textarea @bind="producto.DescTienda" id="descripcion" type="text" class="form-control" rows="10"></textarea>
            </div>
        </div>
        <div class="row mb-3 align-items-center">
            <label for="categoria" class="col-4 col-form-label">Categoría</label>
            <div class="col-8">
                <select @bind="producto.IdCategoria" id="categoria" class="form-select">
                    <option value="">Seleccione una categoría</option>
                    @foreach (var categoria in categorias)
                    {
                        <option value="@categoria.IdCategoria">@categoria.DescCategoria</option>
                    }
                </select>
            </div>
        </div>
        <div class="row mb-3 align-items-center">
            <label for="marca" class="col-4 col-form-label">Marca</label>
            <div class="col-8">
                <input @bind="producto.Marca" id="marca" type="text" class="form-control" />
            </div>
        </div>
        <div class="row mb-3 align-items-center">
            <label for="precioVenta" class="col-4 col-form-label">Precio</label>
            <div class="col-8">
                <input @bind="producto.PrecioVta" id="precioVenta" type="text" class="form-control" />
            </div>
        </div>

        <div class="col-12 text-center mt-4">
            <a class="btn btn-success" @onclick="AgregarProducto">Agregar Producto</a>
        </div>

        @* Mensaje de confirmación *@
        @if (guardadoExitoso)
        {
            <div class="alert alert-success nombre-guardado">
                El producto '@nombreProductoGuardado' fue agregado correctamente.
            </div>
        }
    </div>

</div>


@code {
    private Producto producto = new Producto();
    private bool guardadoExitoso;
    private string nombreProductoGuardado;
    private UsuariosTienda usuariostienda = new UsuariosTienda();
    private string mensaje;
    private string errorMessage;
    private string successMessage;
    private List<Categoria> categorias = new List<Categoria>();
    private bool categoriaExiste;
    private bool tiendaPremium;
    private int cantidadProductos;


    protected override async Task OnInitializedAsync()
    {
        usuariostienda = await datosService.UsuariosTiendas.FirstOrDefaultAsync(u => u.IdU == ServicioUsurioLogin.Id);
        cantidadProductos = await datosService.Productos
        .Where(p => p.IdTienda == usuariostienda.IdT)
        .CountAsync();
        tiendaPremium = await datosService.Tiendas
        .Where(t => t.Id == usuariostienda.IdT).Select(t => t.Premium).FirstOrDefaultAsync();
        categorias = await datosService.Categorias.ToListAsync();
    }

    private async Task AgregarProducto()
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;
        categoriaExiste = false;

        foreach (var categoria in categorias)
        {
            if (categoria.IdCategoria == producto.IdCategoria)
            {
                categoriaExiste = true;
            }

        }


        if (string.IsNullOrEmpty(producto.SkuTienda))
        {
            errorMessage = "Por favor, ingresa los datos de SkuTienda";
        }
        else if (string.IsNullOrEmpty(producto.DescTienda))
        {
            errorMessage = "Por favor, ingresa los datos de la descripción";
        }
        else if (!categoriaExiste)
        {
            errorMessage = "Por favor, ingresa una categoria existente.";
        }
        else if (string.IsNullOrEmpty(producto.Marca))
        {
            errorMessage = "Por favor, ingresa los datos de la marca";
        }
        else if (producto.PrecioVta <= 0)
        {
            errorMessage = "Por favor, ingresa los datos del precio";
        }
        else if (usuariostienda == null || usuariostienda.IdT == 0)
        {
            errorMessage = "Por favor, usuario no registrado.";
        }
        else
        {
            if (cantidadProductos >= 10 && tiendaPremium == false)
            {
                errorMessage = "Llegaste al limite de productos gratuitos. Adquiera la suscripcion Premium";
            }
            else

            {
                producto.IdTienda = usuariostienda.IdT;
                producto.Estatus = bool.Parse("True");
                datosService.Productos.Add(producto);
                await datosService.SaveChangesAsync();
                nombreProductoGuardado = producto.SkuTienda;
                guardadoExitoso = true; // Mostrar un mensaje de confirmación
                producto = new Producto();

            }
        }
    }
}