@page "/carousel"
@inject FlaggGaming.Entity.DatosContext contextoDatos
@inject IJSRuntime Javascript
@using FlaggGaming.Model.juegoFlagg
@using Microsoft.EntityFrameworkCore

<div class="row mx-2 mb-5">
    <div class="col">
        <div id="myCarousel" class="carousel slide" data-ride="carousel">
            <div class="carousel-inner active">
                <div class="carousel-item">
                    <img src=@listaCarousel[0].imagen class="d-block w-100" alt="..." width="600" height="300">
                </div>
                <div class="carousel-item active">
                    <img src=@listaCarousel[1].imagen class="d-block w-100" alt="..." width="600" height="300">
                </div>
                <div class="carousel-item">
                    <img src=@listaCarousel[2].imagen class="d-block w-100" alt="..." width="600" height="300">
                </div>
            </div>
            <a id="myCarousel-prev" class="carousel-control-prev" role="button" data-bs-slide="prev">
                <span class="carousel-control-prev-icon hoverCarousel" aria-hidden="true"></span>
                <span class="visually-hidden">Previous</span>
            </a>
            <a id="myCarousel-next" class="carousel-control-next" role="button" data-bs-slide="next">
                <span class="carousel-control-next-icon hoverCarousel" aria-hidden="true"></span>
                <span class="visually-hidden">Next</span>
            </a>
        </div>
    </div>
</div>

@functions {
    public JuegoFlagg[] listaCarousel = new JuegoFlagg[3];
    public JuegoFlagg[] juegosBaseDatos;
    Random objetoRandom = new Random();
    int randIndex;
    JuegoFlagg juegoRandom;

    protected override void OnInitialized()
    {
        listaCarousel = contextoDatos.listaJuegosData.Where(juego => juego.imagen != null).ToArray();

        for (int indice = 0; indice <= 2; indice++)
        {
            randIndex = objetoRandom.Next(listaCarousel.Length);
            juegoRandom = listaCarousel[randIndex];
            listaCarousel[indice] = juegoRandom;
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Javascript.InvokeAsync<object>("initializeCarousel");
            firstRender = false;
        }
    }
}

<script>
    window.initializeCarousel = () => {
        $('#myCarousel').carousel({ interval: 2000 });

        //see step 2 to understand these news id's:
        $('#myCarousel-prev').click(
            () => $('#myCarousel').carousel('prev'));
        $('#myCarousel-next').click(
            () => $('#myCarousel').carousel('next'));
    }
</script>


       

